/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package testing.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandler;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Criterion;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Disjunction;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Property;
import com.liferay.portal.kernel.dao.orm.PropertyFactoryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.spring.extender.service.ServiceReference;

import testing.model.mencoba2Entry;

import testing.service.mencoba2EntryLocalService;

import testing.service.persistence.mencoba2EntryPersistence;
import testing.service.persistence.mencoba2Persistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the mencoba2 entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link testing.service.impl.mencoba2EntryLocalServiceImpl}.
 * </p>
 *
 * @author sukri
 * @see testing.service.impl.mencoba2EntryLocalServiceImpl
 * @see testing.service.mencoba2EntryLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class mencoba2EntryLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements mencoba2EntryLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link testing.service.mencoba2EntryLocalServiceUtil} to access the mencoba2 entry local service.
	 */

	/**
	 * Adds the mencoba2 entry to the database. Also notifies the appropriate model listeners.
	 *
	 * @param mencoba2Entry the mencoba2 entry
	 * @return the mencoba2 entry that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public mencoba2Entry addmencoba2Entry(mencoba2Entry mencoba2Entry) {
		mencoba2Entry.setNew(true);

		return mencoba2EntryPersistence.update(mencoba2Entry);
	}

	/**
	 * Creates a new mencoba2 entry with the primary key. Does not add the mencoba2 entry to the database.
	 *
	 * @param entryId the primary key for the new mencoba2 entry
	 * @return the new mencoba2 entry
	 */
	@Override
	@Transactional(enabled = false)
	public mencoba2Entry createmencoba2Entry(long entryId) {
		return mencoba2EntryPersistence.create(entryId);
	}

	/**
	 * Deletes the mencoba2 entry with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param entryId the primary key of the mencoba2 entry
	 * @return the mencoba2 entry that was removed
	 * @throws PortalException if a mencoba2 entry with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public mencoba2Entry deletemencoba2Entry(long entryId)
		throws PortalException {
		return mencoba2EntryPersistence.remove(entryId);
	}

	/**
	 * Deletes the mencoba2 entry from the database. Also notifies the appropriate model listeners.
	 *
	 * @param mencoba2Entry the mencoba2 entry
	 * @return the mencoba2 entry that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public mencoba2Entry deletemencoba2Entry(mencoba2Entry mencoba2Entry) {
		return mencoba2EntryPersistence.remove(mencoba2Entry);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(mencoba2Entry.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return mencoba2EntryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link testing.model.impl.mencoba2EntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return mencoba2EntryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link testing.model.impl.mencoba2EntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return mencoba2EntryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return mencoba2EntryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return mencoba2EntryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public mencoba2Entry fetchmencoba2Entry(long entryId) {
		return mencoba2EntryPersistence.fetchByPrimaryKey(entryId);
	}

	/**
	 * Returns the mencoba2 entry matching the UUID and group.
	 *
	 * @param uuid the mencoba2 entry's UUID
	 * @param groupId the primary key of the group
	 * @return the matching mencoba2 entry, or <code>null</code> if a matching mencoba2 entry could not be found
	 */
	@Override
	public mencoba2Entry fetchmencoba2EntryByUuidAndGroupId(String uuid,
		long groupId) {
		return mencoba2EntryPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the mencoba2 entry with the primary key.
	 *
	 * @param entryId the primary key of the mencoba2 entry
	 * @return the mencoba2 entry
	 * @throws PortalException if a mencoba2 entry with the primary key could not be found
	 */
	@Override
	public mencoba2Entry getmencoba2Entry(long entryId)
		throws PortalException {
		return mencoba2EntryPersistence.findByPrimaryKey(entryId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(mencoba2EntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(mencoba2Entry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("entryId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(mencoba2EntryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(mencoba2Entry.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("entryId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(mencoba2EntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(mencoba2Entry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("entryId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					Criterion modifiedDateCriterion = portletDataContext.getDateRangeCriteria(
							"modifiedDate");

					Criterion statusDateCriterion = portletDataContext.getDateRangeCriteria(
							"statusDate");

					if ((modifiedDateCriterion != null) &&
							(statusDateCriterion != null)) {
						Disjunction disjunction = RestrictionsFactoryUtil.disjunction();

						disjunction.add(modifiedDateCriterion);
						disjunction.add(statusDateCriterion);

						dynamicQuery.add(disjunction);
					}

					Property workflowStatusProperty = PropertyFactoryUtil.forName(
							"status");

					if (portletDataContext.isInitialPublication()) {
						dynamicQuery.add(workflowStatusProperty.ne(
								WorkflowConstants.STATUS_IN_TRASH));
					}
					else {
						StagedModelDataHandler<?> stagedModelDataHandler = StagedModelDataHandlerRegistryUtil.getStagedModelDataHandler(mencoba2Entry.class.getName());

						dynamicQuery.add(workflowStatusProperty.in(
								stagedModelDataHandler.getExportableStatuses()));
					}
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<mencoba2Entry>() {
				@Override
				public void performAction(mencoba2Entry mencoba2Entry)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						mencoba2Entry);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(mencoba2Entry.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return mencoba2EntryLocalService.deletemencoba2Entry((mencoba2Entry)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return mencoba2EntryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the mencoba2 entries matching the UUID and company.
	 *
	 * @param uuid the UUID of the mencoba2 entries
	 * @param companyId the primary key of the company
	 * @return the matching mencoba2 entries, or an empty list if no matches were found
	 */
	@Override
	public List<mencoba2Entry> getmencoba2EntriesByUuidAndCompanyId(
		String uuid, long companyId) {
		return mencoba2EntryPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of mencoba2 entries matching the UUID and company.
	 *
	 * @param uuid the UUID of the mencoba2 entries
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of mencoba2 entries
	 * @param end the upper bound of the range of mencoba2 entries (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching mencoba2 entries, or an empty list if no matches were found
	 */
	@Override
	public List<mencoba2Entry> getmencoba2EntriesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<mencoba2Entry> orderByComparator) {
		return mencoba2EntryPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}

	/**
	 * Returns the mencoba2 entry matching the UUID and group.
	 *
	 * @param uuid the mencoba2 entry's UUID
	 * @param groupId the primary key of the group
	 * @return the matching mencoba2 entry
	 * @throws PortalException if a matching mencoba2 entry could not be found
	 */
	@Override
	public mencoba2Entry getmencoba2EntryByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return mencoba2EntryPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the mencoba2 entries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link testing.model.impl.mencoba2EntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of mencoba2 entries
	 * @param end the upper bound of the range of mencoba2 entries (not inclusive)
	 * @return the range of mencoba2 entries
	 */
	@Override
	public List<mencoba2Entry> getmencoba2Entries(int start, int end) {
		return mencoba2EntryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of mencoba2 entries.
	 *
	 * @return the number of mencoba2 entries
	 */
	@Override
	public int getmencoba2EntriesCount() {
		return mencoba2EntryPersistence.countAll();
	}

	/**
	 * Updates the mencoba2 entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param mencoba2Entry the mencoba2 entry
	 * @return the mencoba2 entry that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public mencoba2Entry updatemencoba2Entry(mencoba2Entry mencoba2Entry) {
		return mencoba2EntryPersistence.update(mencoba2Entry);
	}

	/**
	 * Returns the mencoba2 local service.
	 *
	 * @return the mencoba2 local service
	 */
	public testing.service.mencoba2LocalService getmencoba2LocalService() {
		return mencoba2LocalService;
	}

	/**
	 * Sets the mencoba2 local service.
	 *
	 * @param mencoba2LocalService the mencoba2 local service
	 */
	public void setmencoba2LocalService(
		testing.service.mencoba2LocalService mencoba2LocalService) {
		this.mencoba2LocalService = mencoba2LocalService;
	}

	/**
	 * Returns the mencoba2 persistence.
	 *
	 * @return the mencoba2 persistence
	 */
	public mencoba2Persistence getmencoba2Persistence() {
		return mencoba2Persistence;
	}

	/**
	 * Sets the mencoba2 persistence.
	 *
	 * @param mencoba2Persistence the mencoba2 persistence
	 */
	public void setmencoba2Persistence(mencoba2Persistence mencoba2Persistence) {
		this.mencoba2Persistence = mencoba2Persistence;
	}

	/**
	 * Returns the mencoba2 entry local service.
	 *
	 * @return the mencoba2 entry local service
	 */
	public mencoba2EntryLocalService getmencoba2EntryLocalService() {
		return mencoba2EntryLocalService;
	}

	/**
	 * Sets the mencoba2 entry local service.
	 *
	 * @param mencoba2EntryLocalService the mencoba2 entry local service
	 */
	public void setmencoba2EntryLocalService(
		mencoba2EntryLocalService mencoba2EntryLocalService) {
		this.mencoba2EntryLocalService = mencoba2EntryLocalService;
	}

	/**
	 * Returns the mencoba2 entry persistence.
	 *
	 * @return the mencoba2 entry persistence
	 */
	public mencoba2EntryPersistence getmencoba2EntryPersistence() {
		return mencoba2EntryPersistence;
	}

	/**
	 * Sets the mencoba2 entry persistence.
	 *
	 * @param mencoba2EntryPersistence the mencoba2 entry persistence
	 */
	public void setmencoba2EntryPersistence(
		mencoba2EntryPersistence mencoba2EntryPersistence) {
		this.mencoba2EntryPersistence = mencoba2EntryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("testing.model.mencoba2Entry",
			mencoba2EntryLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"testing.model.mencoba2Entry");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return mencoba2EntryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return mencoba2Entry.class;
	}

	protected String getModelClassName() {
		return mencoba2Entry.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = mencoba2EntryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = testing.service.mencoba2LocalService.class)
	protected testing.service.mencoba2LocalService mencoba2LocalService;
	@BeanReference(type = mencoba2Persistence.class)
	protected mencoba2Persistence mencoba2Persistence;
	@BeanReference(type = mencoba2EntryLocalService.class)
	protected mencoba2EntryLocalService mencoba2EntryLocalService;
	@BeanReference(type = mencoba2EntryPersistence.class)
	protected mencoba2EntryPersistence mencoba2EntryPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}